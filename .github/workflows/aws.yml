name: Deploy Project

on:
  push:
     branches: [ "master" ]

jobs:
  deploy:
    runs-on:  ubuntu-latest
    environment: Production
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'
        
    - name: Publish project
      run: dotnet publish --configuration Release --output ./Publish TelegramGptBot/TelegramGptBot.csproj

      
    - name: copy file via ssh key
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        port: ${{ secrets.EC2_PORT }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ./Publish/
        target: ~/bot
    - name: Set Env variable
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
         >~/.bash_profile
         echo export 'GPTApiToken=${{ secrets.GPTAPITOKEN }}' >>~/.bash_profile
         echo export 'TelegramBotToken=${{ secrets.TELEGRAMBOTTOKEN }}' >> ~/.bash_profile
         echo export 'TelegramChatID=${{ secrets.TELEGRAMCHATID }}'  >>~/.bash_profile  
    - name: Add EC2 SSH private key
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
    - name: Stop Older Bot Version
      run:   ssh -i "ec2_key.pem" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  -f ec2-user@ec2-3-29-91-204.me-central-1.compute.amazonaws.com " lsof -t /usr/bin/dotnet | xargs kill"
 
    - name: Run Bot
      run:   ssh -i "ec2_key.pem" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  -f ec2-user@ec2-3-29-91-204.me-central-1.compute.amazonaws.com "source ~/.bash_profile & dotnet  ~/bot/Publish/TelegramGptBot.dll & exit"
   
    - name: Cleanup private key
      run: rm -f ec2_key.pem




 
